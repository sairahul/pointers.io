Index: trace.h
===================================================================
--- trace.h	(.../vendor/picoc-2.1)	(revision 0)
+++ trace.h	(.../trunk/picoc-2.1)	(revision 5)
@@ -0,0 +1,29 @@
+#ifndef _TRACE_H
+#define _TRACE_H (1)
+
+
+/*
+
+    \file
+    \brief Tracing utilities.
+
+*/
+
+
+#include "interpreter.h"
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+void trace_state_print (struct ParseState *Parser);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#endif /* ! _TRACE_H */

Property changes on: trace.h
___________________________________________________________________
Added: svn:mime-type
   + text/x-chdr

Index: parse.c
===================================================================
--- parse.c	(.../vendor/picoc-2.1)	(revision 5)
+++ parse.c	(.../trunk/picoc-2.1)	(revision 5)
@@ -1,5 +1,6 @@
 #include "picoc.h"
 #include "interpreter.h"
+#include "trace.h"
 
 /* a chunk of heap-allocated tokens we'll cleanup when we're done */
 struct CleanupTokenNode
@@ -800,6 +801,7 @@
     {
         if (LexGetToken(Parser, NULL, TRUE) != TokenSemicolon)
             ProgramFail(Parser, "';' expected");
+        trace_state_print(Parser);
     }
     
     return ParseResultOk;
Index: test.c
===================================================================
--- test.c	(.../vendor/picoc-2.1)	(revision 0)
+++ test.c	(.../trunk/picoc-2.1)	(revision 5)
@@ -0,0 +1,36 @@
+int N;
+
+
+void f (int *b)
+
+{
+
+    int j;
+
+    j = 3;
+
+    b[j] = 15;
+
+} /* f() */
+
+
+int main (void)
+
+{
+
+    int i;
+    int a[10];
+    int *p;
+
+    i = 5;
+    N = 10;
+
+    f(a);
+
+    p = &i;
+
+    *p = 20;
+
+    return 0;
+
+} /* main() */

Property changes on: test.c
___________________________________________________________________
Added: svn:mime-type
   + text/x-csrc

Index: picoc_trace.py
===================================================================
--- picoc_trace.py	(.../vendor/picoc-2.1)	(revision 0)
+++ picoc_trace.py	(.../trunk/picoc-2.1)	(revision 5)
@@ -0,0 +1,251 @@
+#!/usr/bin/env python
+
+
+import os
+import subprocess
+import json
+
+# import pprint
+
+
+class Variable:
+    def __init__ (self, frame, name, type_, address, unit_size,
+                  value):
+        self.frame = frame
+        self.name = name
+        self.type_ = type_
+        self.address = address
+        self.unit_size = unit_size
+        if type(value) == type([]):
+            if value[-1] == '_dummy':
+                self.value = value[: -1]
+            else:
+                self.value = list(value)
+        else:
+            self.value = value
+    def close (self):
+        self.frame = None
+        self.value = None
+    def repr (self):
+        if isinstance(self.value, Pointer):
+            r = self.value.repr()
+        else:
+            r = str(self.value)
+        return r
+    def __cmp__ (self, other):
+        if self.type_ != other.type_ or \
+           type(self.value) != type(other.value):
+            return 1
+        return self.value != other.value
+
+
+class Pointer:
+    def __init__ (self, address, var=None, index=None):
+        self.address = address
+        self.var = var
+        self.index = index
+    def repr (self):
+        if self.address == 0:
+            r = 'NULL'
+        elif self.var is not None:
+            r = '&%s.%s' % (self.var.frame.name(), self.var.name)
+            if self.index is not None:
+                r += '[%d]' % self.index
+        else:
+            r = '0x%x' % self.address
+        return r
+    def __cmp__ (self, other):
+        if self.address != other.address:
+            return 1
+        if self.var is None and other.var is None:
+            return 0
+        if self.var is None or other.var is None:
+            return 1
+        if self.var.name != other.var.name:
+            return 1
+        if self.index != other.index:
+            return 1
+        return 0
+
+
+class Frame:
+    def __init__ (self, stack, function):
+        self.stack = stack
+        self.function = function
+        self.variables = {}
+    def close (self):
+        self.stack = None
+        for v in self.variables.itervalues():
+            v.close()
+        self.variables = {}
+    def add_variable (self, var):
+        self.variables[var.name] = var
+    def name (self):
+        if self.function == '':
+            n = '__GLOBALS__'
+        else:
+            n = '%s()' % self.function
+        return n
+    def repr (self, old_frame):
+        r = []
+        var_names = self.variables.keys()
+        var_names.sort()
+        for vn in var_names:
+            var = self.variables[vn]
+            changed = old_frame is None or \
+                      vn not in old_frame.variables or \
+                      var != old_frame.variables[vn]
+            prefix = [' ', '*'][changed]
+            r.append('%s   %-32s %-16s %s' %
+                     (prefix, vn, var.type_, var.repr()))
+        return r
+
+
+class CStack:
+    def __init__ (self, picoc_data):
+        self.frames = []
+        frame = Frame(self, '')
+        for v in picoc_data.get('vars', [])[:-1]:
+            if v['function'] != frame.function:
+                frame = Frame(self, v['function'])
+                self.frames.insert(0, frame)
+            if frame.function == '' and v['name'] == '__exit_value':
+                continue
+            var = Variable(frame, v['name'], v['type'], v['address'],
+                                  v['unit_size'], v['value'])
+            frame.add_variable(var)
+        self._resolve_pointers()
+    def close (self):
+        for f in self.frames:
+            f.close()
+        self.frames = []
+    def _find_pointer (self, p):
+        for frame in self.frames:
+            for var in frame.variables.itervalues():
+                if type(var.value) == type([]):
+                    q, r = divmod(p - var.address, var.unit_size)
+                    if q >= 0 and q < len(var.value):
+                        if r == 0:
+                            return Pointer(p, var=var, index=q)
+                        else:
+                            return Pointer(p)
+                else:
+                    if p == var.address:
+                        return Pointer(p, var=var)
+        return Pointer(p)
+    def _resolve_pointers (self):
+        for frame in self.frames:
+            for var in frame.variables.itervalues():
+                if var.type_ == 'Pointer':
+                    if type(var.value) == type([]):
+                        for i in xrange(len(var.value)):
+                            var.value[i] = \
+                              self._find_pointer(var.value[i])
+                    else:
+                        var.value = self._find_pointer(var.value)
+    def repr (self, old_stack):
+        r = []
+        functions_match = True
+        for i, frame in enumerate(self.frames):
+            functions_match = \
+                functions_match and \
+                i < len(old_stack.frames) and \
+                frame.function == old_stack.frames[i].function
+            prefix = ['*', ' '][functions_match]
+            r.append('%s %s' % (prefix, frame.name()))
+            old_frame = None
+            if functions_match:
+                old_frame = old_stack.frames[i]
+            r.extend(frame.repr(old_frame))
+        return r
+
+
+class CCode:
+    def __init__ (self, filename):
+        f = open(filename, 'r')
+        self.c_code = f.readlines()
+        f.close()
+    def close (self):
+        pass
+    def context (self, line_num, column, n_context_lines=6):
+        context_lines = []
+        begin = line_num - n_context_lines
+        end = line_num + n_context_lines + 1
+        for i in xrange(begin, end):
+            if i < 0 or i >= len(self.c_code):
+                context_lines.append('\n')
+            else:
+                context_lines.append('  ' + self.c_code[i])
+                if i == line_num:
+                    context_lines.append('>-' + '-' * column + '^\n')
+        return context_lines
+
+
+def main (argv=None):
+
+    import optparse
+
+    if argv is None:
+        argv = ['-']
+
+    # default_boolean = False
+    default_picoc_exe = './picoc'
+
+    usage = '%prog [options] file.c'
+    parser = optparse.OptionParser(usage=usage)
+    # parser.add_option('-b', '--boolean',
+    #                   action='store_true',
+    #                   help='this boolean (default: %default)')
+    parser.add_option('-p', '--picoc-exe',
+                      help='picoc exe path (default: %default)')
+    parser.set_defaults(
+        # boolean=default_boolean
+        picoc_exe=default_picoc_exe
+    )
+    options, args = parser.parse_args(args=argv[1:])
+
+    if len(args) != 1:
+        parser.print_help()
+        return 1
+
+    picoc_exe = options.picoc_exe
+    c_filename = args[0]
+
+    c_code = CCode(c_filename)
+
+    p = subprocess.Popen([picoc_exe, c_filename],
+                         stdin=subprocess.PIPE,
+                         stdout=None,
+                         stderr=subprocess.PIPE)
+
+    old_stack = CStack({})
+    while True:
+        line = p.stderr.readline()
+        try:
+            data = json.loads(line)
+        except ValueError:
+            break
+        stack = CStack(data)
+        os.system('clear')
+        print ''.join(c_code.context(data['line'], data['column']))
+        print '\n'.join(stack.repr(old_stack))
+        old_stack.close()
+        old_stack = stack
+        print
+        raw_input('Hit [return] to continue...')
+        try:
+            p.stdin.write('\n')
+        except IOError:
+            break
+    old_stack.close()
+
+    p.wait()
+
+    c_code.close()
+
+    return 0
+
+
+if __name__ == '__main__':
+    import sys
+    sys.exit(main(sys.argv))

Property changes on: picoc_trace.py
___________________________________________________________________
Added: svn:mime-type
   + text/x-python

Index: Makefile
===================================================================
--- Makefile	(.../vendor/picoc-2.1)	(revision 5)
+++ Makefile	(.../trunk/picoc-2.1)	(revision 5)
@@ -8,7 +8,7 @@
 	platform/platform_unix.c platform/library_unix.c \
 	cstdlib/stdio.c cstdlib/math.c cstdlib/string.c cstdlib/stdlib.c \
 	cstdlib/time.c cstdlib/errno.c cstdlib/ctype.c cstdlib/stdbool.c \
-	cstdlib/unistd.c
+	cstdlib/unistd.c trace.c
 OBJS	:= $(SRCS:%.c=%.o)
 
 all: $(TARGET)
@@ -53,3 +53,4 @@
 cstdlib/ctype.o: cstdlib/ctype.c interpreter.h platform.h
 cstdlib/stdbool.o: cstdlib/stdbool.c interpreter.h platform.h
 cstdlib/unistd.o: cstdlib/unistd.c interpreter.h platform.h
+trace.o: trace.c trace.h interpreter.h
Index: trace.c
===================================================================
--- trace.c	(.../vendor/picoc-2.1)	(revision 0)
+++ trace.c	(.../trunk/picoc-2.1)	(revision 5)
@@ -0,0 +1,387 @@
+#include <stdio.h>
+
+#include "trace.h"
+
+
+static char *Base_type_str[] = {
+    "Void",
+    "Int",
+    "Short",
+    "Char",
+    "Long",
+    "UnsignedInt",
+    "UnsignedShort",
+    "UnsignedLong",
+    #ifndef NO_FP
+        "FP",
+    #endif
+    "Function",
+    "Macro",
+    "Pointer",
+    "Array",
+    "Struct",
+    "Union",
+    "Enum",
+    "GotoLabel",
+    "_Type",
+};
+
+
+enum {
+    ITER_RETURN_YIELD,
+    ITER_RETURN_EXIT,
+};
+
+
+typedef struct Iter {
+    int state;
+} Iter;
+
+
+enum {
+    ITER_STATE_BEGIN = -1,
+    ITER_STATE_NEXT = -2,
+};
+
+
+#define ITER_OPEN(_s) do { \
+    (_s).state = ITER_STATE_BEGIN; \
+} while (0)
+
+
+#define ITER_CLOSE(_s) do { \
+} while (0)
+
+
+#define ITER_BEGIN(_s) \
+    switch ((_s).state) { \
+    case ITER_STATE_BEGIN: \
+        ;
+
+
+#define ITER_END(_s) \
+    } /* switch */ \
+    return ITER_RETURN_EXIT;
+
+
+#define ITER_YIELD(_s, _next) do { \
+    (_s).state = (_next); \
+    return ITER_RETURN_YIELD; \
+    case (_next): \
+       ; \
+} while (0)
+
+
+#define ITER_YIELD_NEXT(_s) ITER_YIELD((_s), ITER_STATE_NEXT)
+
+
+typedef struct TableIter {
+    Iter iter;
+    const struct Table *table;
+    int i;
+    const struct TableEntry *entry;
+} TableIter;
+
+
+static void table_iter_open (TableIter *s, const struct Table *table)
+
+{
+
+    s->table = table;
+    ITER_OPEN(s->iter);
+
+} /* table_iter_open() */
+
+
+static void table_iter_close (TableIter *s)
+
+{
+
+    ITER_CLOSE(s->iter);
+
+} /* table_iter_close() */
+
+
+static int table_iter_next (TableIter *s,
+                            const struct TableEntry **te)
+
+{
+
+    ITER_BEGIN(s->iter);
+
+    for (s->i = 0; s->i < s->table->Size; s->i ++) {
+        for (s->entry = s->table->HashTable[s->i];
+             s->entry != NULL;
+             s->entry = s->entry->Next) {
+            if (! s->entry->p.v.Val->IsLValue)
+                continue;
+            *te = s->entry;
+            ITER_YIELD_NEXT(s->iter);
+        }
+    }
+
+    ITER_END(s->iter);
+
+} /* table_iter_next() */
+
+
+typedef struct TraceVariablesIter {
+    Iter iter;
+    TableIter table_iter;
+    const struct StackFrame *sf;
+} TraceVariablesIter;
+
+
+typedef struct TraceVariable {
+    const char *func_name;
+    const char *var_name;
+    unsigned long address;
+    int is_array;
+    long array_len;
+    enum BaseType type;
+    union {
+        int i;
+        const int *array_i;
+        void *ptr;
+        void **array_ptr;
+    } v;
+} TraceVariable;
+
+
+enum {
+    STATE_NEXT_STACK,
+    STATE_NEXT_GLOBAL,
+};
+
+
+static int trace_variables_iter_open (TraceVariablesIter *s)
+
+{
+
+    ITER_OPEN(s->iter);
+
+    return 0;
+
+} /* trace_variables_iter_open() */
+
+
+static void trace_variables_iter_close (TraceVariablesIter *s)
+
+{
+
+    ITER_CLOSE(s->iter);
+
+} /* trace_variables_iter_close() */
+
+
+static void trace_variable_fill (TraceVariable *var,
+                                 const struct TableEntry *entry)
+
+{
+
+    /* var->func_name = NULL; */
+    var->var_name = entry->p.v.Key;
+    var->address = (unsigned long)entry->p.v.Val->Val;
+    var->is_array = entry->p.v.Val->Typ->Base == TypeArray;
+    var->type = var->is_array ?
+                  entry->p.v.Val->Typ->FromType->Base :
+                  entry->p.v.Val->Typ->Base;
+    if (var->is_array) {
+        var->array_len = entry->p.v.Val->Typ->ArraySize;
+        switch (var->type) {
+            case TypeInt:
+                var->v.array_i =
+                  (int *)(entry->p.v.Val->Val->ArrayMem);
+            break;
+            case TypePointer:
+                var->v.array_ptr =
+                  (void **)(entry->p.v.Val->Val->ArrayMem);
+            break;
+            default:
+            break;
+        }
+    } else {
+        switch (var->type) {
+            case TypeInt:
+                var->v.i = entry->p.v.Val->Val->Integer;
+            break;
+            case TypePointer:
+                var->v.ptr = entry->p.v.Val->Val->Pointer;
+            break;
+            default:
+            break;
+        }
+    }
+
+} /* trace_variable_fill() */
+
+
+static int trace_variables_iter_next (TraceVariablesIter *s,
+                                      TraceVariable *var)
+
+{
+
+    int v;
+    const struct TableEntry *entry;
+
+    ITER_BEGIN(s->iter);
+
+    for (s->sf = TopStackFrame;
+         s->sf != NULL;
+         s->sf = s->sf->PreviousStackFrame) {
+         table_iter_open(&s->table_iter, &s->sf->LocalTable);
+         while (1) {
+             v = table_iter_next(&s->table_iter, &entry);
+             if (v != 0)
+                 break;
+            trace_variable_fill(var, entry);
+            var->func_name = s->sf->FuncName;
+            ITER_YIELD(s->iter, STATE_NEXT_STACK);
+         }
+         table_iter_close(&s->table_iter);
+    }
+
+    table_iter_open(&s->table_iter, &GlobalTable);
+    while (1) {
+        v = table_iter_next(&s->table_iter, &entry);
+        if (v != 0)
+            break;
+        trace_variable_fill(var, entry);
+        var->func_name = NULL;
+        ITER_YIELD(s->iter, STATE_NEXT_GLOBAL);
+    }
+    table_iter_close(&s->table_iter);
+
+    ITER_END(s->iter);
+
+} /* trace_variables_iter_next() */
+
+
+static void print_kv_s (const char *key, const char *value)
+
+{
+
+    fprintf(stderr, "\"%s\":\"%s\",", key, value);
+
+} /* print_kv_s() */
+
+
+static void print_kv_ld (const char *key, long value)
+
+{
+
+    fprintf(stderr, "\"%s\":%ld,", key, value);
+
+} /* print_kv_ld() */
+
+
+static void print_kv_lu (const char *key, unsigned long value)
+
+{
+
+    fprintf(stderr, "\"%s\":%lu,", key, value);
+
+} /* print_kv_lu() */
+
+
+void trace_state_print (struct ParseState *parser)
+
+{
+
+    /*
+    long line_num;
+    const char *p;
+    char c;
+    const char *begin;
+    */
+    int v;
+    TraceVariablesIter var_iter;
+    TraceVariable var;
+    int i;
+
+    if (! TopStackFrame)
+        return;
+
+    /*
+    fprintf(stderr, "%s:%d (%d): ",
+            parser->FileName, parser->Line, parser->CharacterPos);
+    p = parser->SourceText;
+    line_num = 1;
+    while ((c = *p) != '\0') {
+        p ++;
+        if (c == '\n') {
+            line_num ++;
+            if (line_num == parser->Line)
+                break;
+        }
+    }
+    begin = p;
+    while ((c = *p) != '\0' && c != '\n')
+        p ++;
+    fprintf(stderr, "%.*s\n", (int)(p - begin), begin);
+    */
+
+    fprintf(stderr, "{");
+
+    print_kv_s("filename", parser->FileName);
+    print_kv_ld("line", (long)(parser->Line - 1));
+    print_kv_ld("column", (long)(parser->CharacterPos));
+
+    fprintf(stderr, "\"vars\":[");
+    v = trace_variables_iter_open(&var_iter);
+    if (v != 0)
+        return;
+    while (1) {
+        v = trace_variables_iter_next(&var_iter, &var);
+        if (v != 0)
+            break;
+        fprintf(stderr, "{");
+        if (var.func_name == NULL) {
+            print_kv_s("storage", "global");
+            print_kv_s("function", "");
+        } else {
+            print_kv_s("storage", "local");
+            print_kv_s("function", var.func_name);
+        }
+        print_kv_s("name", var.var_name);
+        print_kv_lu("address", var.address);
+        print_kv_s("type", Base_type_str[var.type]);
+        /* print_kv_ld("is_array", var.is_array); */
+        if (var.is_array) {
+            /* print_kv_ld("array_len", var.array_len); */
+            if (var.type == TypeInt) {
+                print_kv_lu("unit_size", sizeof(var.v.array_i[0]));
+                fprintf(stderr, "\"value\":[");
+                for (i = 0; i < var.array_len; i ++)
+                    fprintf(stderr, "%d,", var.v.array_i[i]);
+                fprintf(stderr, "\"_dummy\"],");
+            } else if (var.type == TypePointer) {
+                print_kv_lu("unit_size", sizeof(var.v.array_ptr[0]));
+                fprintf(stderr, "\"value\":[");
+                for (i = 0; i < var.array_len; i ++)
+                    fprintf(stderr, "%lu,",
+                            (unsigned long)var.v.array_ptr[i]);
+                fprintf(stderr, "\"_dummy\"],");
+            }
+        } else {
+            if (var.type == TypeInt) {
+                print_kv_lu("unit_size", sizeof(var.v.i));
+                print_kv_ld("value", var.v.i);
+            } else if (var.type == TypePointer) {
+                print_kv_lu("unit_size", sizeof(var.v.ptr));
+                print_kv_lu("value", (unsigned long)var.v.ptr);
+            }
+        }
+        fprintf(stderr, "\"_dummy\":0},");
+    }
+    trace_variables_iter_close(&var_iter);
+    fprintf(stderr, "\"_dummy\"],");
+
+    fprintf(stderr, "\"_dummy\":0}");
+
+    fprintf(stderr, "\n");
+
+    fflush(stderr);
+    getchar();
+
+} /* trace_state_print() */

Property changes on: trace.c
___________________________________________________________________
Added: svn:mime-type
   + text/x-csrc

Index: TODO.txt
===================================================================
--- TODO.txt	(.../vendor/picoc-2.1)	(revision 0)
+++ TODO.txt	(.../trunk/picoc-2.1)	(revision 5)
@@ -0,0 +1,32 @@
+- Show primitive types other than int's.
+
+- Track and show structs, unions (and pointers into them).
+
+- Show pointer-to-things-other-than-int and
+  arrays-of-things-other-than-int.
+
+- Trace dynamic allocations.
+
+  E.g.:  Have a global data structure that tracks dynamically
+  allocated memory by hooking into functions like
+  cstdlib/stdlib.c:StdlibMalloc().  In the trace_state_print() output
+  JSON, in addition to the globals and the stack, walk the
+  dynamically-allocated-memory data structure and output the details.
+  Also, for each pointer, in the JSON, output the pointed-to type and
+  its size (in addition to the fact that the pointer is a pointer).
+  In the python driver, for each malloc()-ed block, maintain its type
+  based on the pointed-to type of some pointer pointing to the block.
+  With this info, each malloc()-ed block can be displayed as part of
+  the state, and when a malloc()-ed block is modified through a
+  pointer, the change marker can be shown.
+
+- When some variable is modified through one or more levels of
+  indirection, show the details of the indirection (needs tracing the
+  assignment itself as opposed to the current diff-based change
+  tracking).
+
+- Track logical sequence points in addition to (or instead of)
+  semicolons, to allow finer-grained tracing (e.g., currently the
+  condition evaluation of an if or a while is not traced).
+
+----------------------------------------------------------------------

Property changes on: TODO.txt
___________________________________________________________________
Added: svn:mime-type
   + text/plain

